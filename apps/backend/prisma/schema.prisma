// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String   @id @default(uuid())
  username       String   @unique
  email          String   @unique
  password       String
  location       String
  isVerify       Boolean  @default(false)
  profilePicture String?
  bio            String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  books             Book[]
  borrowRequests    BorrowRequest[]
  reviews           Review[]
  userBookFavorites UserBookFavorite[]
  requesterUsers    FriendShip[]       @relation("requesterUser")
  receiverUsers     FriendShip[]       @relation("receiverUser")
  notifications     Notification[]
  userActivities    UserActivity[]
}

model Book {
  id             String    @id @default(uuid())
  title          String
  description    String
  language       String
  author         String?
  publisher      String?
  isbn           Boolean?
  published_year DateTime?
  coverImage     String?
  pageCount      Int
  ownerId        String
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  owner User @relation(fields: [ownerId], references: [id], onDelete: Cascade)

  bookCopies        BookCopy[]
  reviews           Review[]
  bookTags          BookTag[]
  userBookFavorites UserBookFavorite[]
}

enum BookCopyFormat {
  HARD_COVER
  PAPER_BACK
  E_BOOK
  AUDIO_BOOK
}

enum BookCondition {
  AS_NEW
  FINE
  VERY_GOOD
  GOOD
  FAIR
  POOR
}

model BookCopy {
  id          String         @id @default(uuid())
  bookId      String
  isAvailable Boolean
  condition   BookCondition  @default(GOOD)
  notes       String?
  format      BookCopyFormat
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt

  book           Book            @relation(fields: [bookId], references: [id], onDelete: Cascade)
  borrowRequests BorrowRequest[]
}

enum BorrowRequestStatus {
  PENDING
  ACCEPTED
  REJECTED
  RETURNED
}

model BorrowRequest {
  id           String              @id @default(uuid())
  bookCopyId   String
  borrowerId   String
  status       BorrowRequestStatus @default(PENDING)
  requestDate  DateTime            @default(now())
  approvedDate DateTime?
  dueDate      DateTime?
  returnDate   DateTime?
  createdAt    DateTime            @default(now())
  updatedAt    DateTime            @updatedAt

  bookCopy BookCopy @relation(fields: [bookCopyId], references: [id])
  borrower User     @relation(fields: [borrowerId], references: [id])
}

model Review {
  id      String @id @default(uuid())
  bookId  String
  userId  String
  rating  Int
  comment String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  book Book @relation(fields: [bookId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Tag {
  id       String    @id @default(uuid())
  name     String    @unique
  bookTags BookTag[]
}

model BookTag {
  bookId String
  tagId  String
  book   Book   @relation(fields: [bookId], references: [id], onDelete: Cascade)
  tag    Tag    @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([bookId, tagId])
}

model UserBookFavorite {
  bookId String
  userId String
  book   Book   @relation(fields: [bookId], references: [id], onDelete: Cascade)
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, bookId])
}

enum FriendShipStatus {
  PENDING
  ACCEPTED
  REJECTED
}

model FriendShip {
  requesterId String
  receiverId  String
  status      FriendShipStatus
  createdAt   DateTime         @default(now())

  requester User @relation(fields: [requesterId], references: [id], name: "requesterUser")
  receiver  User @relation(fields: [receiverId], references: [id], name: "receiverUser")

  @@id([requesterId, receiverId])
}

model Notification {
  id      String  @id @default(uuid())
  userId  String
  type    String
  message String
  isRead  Boolean @default(false)

  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id])
}

model UserActivity {
  id     String @id @default(uuid())
  userId String
  action String

  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id])
}
